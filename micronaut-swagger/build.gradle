plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "org.jetbrains.kotlin.kapt" version "1.3.61"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.61"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}

version "0.1"
group "micronaut.swagger"

repositories {
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    // Micronaut Core
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"

    // Micronaut HTTP Client
    implementation "io.micronaut:micronaut-http-client"

    // Micronaut HTTP Server
    implementation "io.micronaut:micronaut-http-server-netty"

    // Micronaut HTTP Server OpenAPI / Swagger
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    kapt "io.micronaut.configuration:micronaut-openapi"
    implementation "io.swagger.core.v3:swagger-annotations"

    // JSON
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"

    // Logging
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    // Test
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-kotlintest"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
    testImplementation "io.mockk:mockk:1.9.3"
}

test.classpath += configurations.developmentOnly

mainClassName = "micronaut.swagger.Application"

test {
    useJUnitPlatform()
}

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = '11' 
	    javaParameters = true // Will retain parameter names for Java reflection
    }
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '11' 
	    javaParameters = true 
	}
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
